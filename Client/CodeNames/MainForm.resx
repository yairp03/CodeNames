<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AB//AAD//wAA//+AAf//gAH//8AD///hh/8=
</value>
  </data>
</root>